{
	"a_problem_with_svgs_and_how_to_avoid_it": {
		"content": "<p>)</p>\n<p>I found an in­ter­est­ing bug while try­ing to ﬁnd an easy to use <span class=\"small-caps\">SVG</span> so­lu­tion al­ter­na­tives at work. I’d like to take you on the trip I went on while try­ing to solve a prob­lem, in or­der to get the full scope of this su­per niche is­sue.</p>\n<h2 id=\"svg-and-how-it-shouldn-t-be-implemented\"><span class=\"small-caps\">SVG</span> and how it <em>should­n’t</em> be im­ple­mented</h2>\n<p>Scalable Vector Graphics (SVGs) are an awe­some bit of tech­nol­ogy that al­lows you to use vec­tor ﬁles in your <span class=\"small-caps\">HTML</span> and <span class=\"small-caps\">CSS</span>, in­stead of raster im­ages. This gives you the ﬂex­i­bil­ity of be­ing able to re­size el­e­ments us­ing SVGs with­out hav­ing to worry about them look­ing pix­e­lated. However they are no­to­ri­ously an­noy­ing to work with. Not <em>dif­ﬁ­cult</em> to work with, just… an­noy­ing! There’s a litany of ref­er­ences as far as how SVGs should be im­ple­mented on front end de­vel­op­ment blogs across the web, and yet they are rarely con­sis­tent. This is mainly sur­pris­ing be­cause SVGs have been around for sev­eral years now. I re­mem­ber im­ple­ment­ing them as early as 2013, and I’m sure that their ac­tual tech spec dates back much far­ther than that.</p>\n<p>One of the ﬁrst widely im­ple­mented way to use SVGs was demon­strated by famed de­vel­oper <a href=\"https://twitter.com/chriscoyier\">Chris Coyier</a> on <a href=\"https://css-tricks.com/using-svg/\">CSSTricks</a>. This ar­ti­cle is still on the ﬁrst page of google re­sults when search­ing for<span class=\"push-double\"></span> <span class=\"pull-double\">“</span><span class=\"small-caps\">SVG</span><span class=\"push-double\"></span><span class=\"pull-double\">”</span>, and un­der­stand­ably so. Now, I’m not go­ing to say any­thing bad about Chris, he’s ob­vi­ously a huge ﬁg­ure in the front end de­vel­oper com­mu­nity. But this ar­ti­cle has prob­a­bly led to some of the worst im­ple­men­ta­tions of <span class=\"small-caps\">SVG</span> that ex­ist on the web. In this ar­ti­cle he states that a good so­lu­tion for SVGs as back­ground im­ages is to en­code them in BASE-64 and then put them in your <span class=\"small-caps\">CSS</span>. There’s a huge prob­lem with this though. Well… sev­eral ac­tu­ally. The ﬁrst is that the very pur­pose of en­cod­ing things as BASE-64 is to save on per­for­mance. Your BASE-64 should be smaller than the orig­i­nal ﬁle. This can of­ten not be the case. The sec­ond is­sue is that it causes your <span class=\"small-caps\">CSS</span> to look like crap. Having a big block of ro­botic moon-speak in the mid­dle of your stylesheet is ex­tremely un­set­tling, in con­trast to the clean code I’m sure every­one has writ­ten around it. The last and se­cretly most in­sid­i­ous is­sue, arises when you start us­ing this tech­nique with a pre­proces­sor like <span class=\"small-caps\">LESS</span> or <span class=\"small-caps\">SASS</span>.</p>\n<p>Let’s say you want to start us­ing SVGs, in your nifty new pre­proces­sor lan­guage that you’ve started to use, but maybe haven’t got­ten a full grasp on how ei­ther work yet. So you stum­ble upon this afore­men­tioned ar­ti­cle, and de­cide to put that an­droid-bab­ble into a vari­able in your stylesheet. Maybe, be­cause you’re a bit more ad­vanced, you want to put it in a mixin. Let’s say that this is for a com­monly used icon, and you pro­ceed to ref­er­ence that vari­able or mixin all over the place, and your code looks much cleaner than if you were to try and put a big block of garbage all over the place. And you smile at how clean your code looks, com­pile your stylesheet, and give your­self a pat on the back for how good of a job you’ve done.</p>\n<p>Except, that block of garbage can’t get<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>referenced” in your com­piled <span class=\"small-caps\">CSS</span> now, it needs to be put in every place you want that <span class=\"small-caps\">SVG</span> to show up. Every… sin­gle… place. If you do ex­actly what I just men­tioned, there’s no shame in it. It’s a to­tally un­der­stand­able mis­take, but yeah you might want to ﬁx that. If you make this mis­take, your un­wit­tingly get­ting rid of one of the best ben­e­ﬁts of <span class=\"small-caps\">SVG</span>: per­for­mance. Instead, you’re clog­ging up your style re­quest with all of this BASE-64 non­sense.</p>\n<h2 id=\"how-svgs-should-be-implemented\">How SVGs <em>should</em> be im­ple­mented</h2>\n<p>Now, this is one par­tic­u­lar bad way to im­ple­ment this, but how can we ﬁx it, and what are some other so­lu­tions? SVGs are very ﬂex­i­ble in the way of how they can be im­ple­mented, and like I’ve said, there is lit­tle con­sis­tency on which way is best. In my mind, there are two ways that an <span class=\"small-caps\">SVG</span> can and should be im­ple­mented, and they both have their ben­e­ﬁt. The ﬁrst is to use them in­line. SVGs can be in­jected di­rectly into your markup. This al­lows you the added ben­e­ﬁt of be­ing able to dy­nam­icly ma­nip­u­late them. Once an <span class=\"small-caps\">SVG</span> is in­line, you can think of it as be­ing drawn when the page is be­ing painted by the browser, but it can be up­dated via <span class=\"small-caps\">CSS</span> as well. A sim­ple ex­am­ple of this hav­ing an icon, that once hov­ered over, will change the ﬁll color from blue to red.</p>\n<pre><code class=\"lang-HTML\">&lt;!-- in your HTML --&gt;\n    &lt;svg&gt;\n        &lt;path&gt;&lt;/path&gt; &lt;!-- part of your svg icon --&gt;\n        .\n        .\n        .\n    &lt;/svg&gt;\n</code></pre>\n<pre><code class=\"lang-SASS\">     //In your Stylesheet (sass in this example)\n    svg {\n        path {\n            fill: blue;\n        }\n\n        &amp;: hover {\n            path {\n                fill: red;\n            }\n        }\n    }\n</code></pre>\n",
		"meta": {
			"creationDate": "2021-07-21T22:53:03.273Z",
			"lastEdited": "2021-07-21T22:54:51.788Z",
			"tags": [
				"SVG"
			],
			"title": "A Problem with SVGs and How to Avoid It",
			"publishDate": "2017-03-18T00:00:00-05:00"
		}
	}
}