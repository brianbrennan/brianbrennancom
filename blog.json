{
	"a-problem-with-svgs-and-how-to-avoid-it": {
		"content": "<p>I found an in­ter­est­ing bug while try­ing to ﬁnd an easy to use <span class=\"small-caps\">SVG</span> so­lu­tion al­ter­na­tives at work. I’d like to take you on the trip I went on while try­ing to solve a prob­lem, in or­der to get the full scope of this su­per niche is­sue.</p>\n<h2 id=\"svg-and-how-it-shouldn-t-be-implemented\"><span class=\"small-caps\">SVG</span> and how it <em>should­n’t</em> be im­ple­mented</h2>\n<p>Scalable Vector Graphics (SVGs) are an awe­some bit of tech­nol­ogy that al­lows you to use vec­tor ﬁles in your <span class=\"small-caps\">HTML</span> and <span class=\"small-caps\">CSS</span>, in­stead of raster im­ages. This gives you the ﬂex­i­bil­ity of be­ing able to re­size el­e­ments us­ing SVGs with­out hav­ing to worry about them look­ing pix­e­lated. However they are no­to­ri­ously an­noy­ing to work with. Not <em>dif­ﬁ­cult</em> to work with, just… an­noy­ing! There’s a litany of ref­er­ences as far as how SVGs should be im­ple­mented on front end de­vel­op­ment blogs across the web, and yet they are rarely con­sis­tent. This is mainly sur­pris­ing be­cause SVGs have been around for sev­eral years now. I re­mem­ber im­ple­ment­ing them as early as 2013, and I’m sure that their ac­tual tech spec dates back much far­ther than that.</p>\n<p>One of the ﬁrst widely im­ple­mented way to use SVGs was demon­strated by famed de­vel­oper <a href=\"https://twitter.com/chriscoyier\">Chris Coyier</a> on <a href=\"https://css-tricks.com/using-svg/\">CSSTricks</a>. This ar­ti­cle is still on the ﬁrst page of google re­sults when search­ing for<span class=\"push-double\"></span> <span class=\"pull-double\">“</span><span class=\"small-caps\">SVG</span><span class=\"push-double\"></span><span class=\"pull-double\">”</span>, and un­der­stand­ably so. Now, I’m not go­ing to say any­thing bad about Chris, he’s ob­vi­ously a huge ﬁg­ure in the front end de­vel­oper com­mu­nity. But this ar­ti­cle has prob­a­bly led to some of the worst im­ple­men­ta­tions of <span class=\"small-caps\">SVG</span> that ex­ist on the web. In this ar­ti­cle he states that a good so­lu­tion for SVGs as back­ground im­ages is to en­code them in BASE-64 and then put them in your <span class=\"small-caps\">CSS</span>. There’s a huge prob­lem with this though. Well… sev­eral ac­tu­ally. The ﬁrst is that the very pur­pose of en­cod­ing things as BASE-64 is to save on per­for­mance. Your BASE-64 should be smaller than the orig­i­nal ﬁle. This can of­ten not be the case. The sec­ond is­sue is that it causes your <span class=\"small-caps\">CSS</span> to look like crap. Having a big block of ro­botic moon-speak in the mid­dle of your stylesheet is ex­tremely un­set­tling, in con­trast to the clean code I’m sure every­one has writ­ten around it. The last and se­cretly most in­sid­i­ous is­sue, arises when you start us­ing this tech­nique with a pre­proces­sor like <span class=\"small-caps\">LESS</span> or <span class=\"small-caps\">SASS</span>.</p>\n<p>Let’s say you want to start us­ing SVGs, in your nifty new pre­proces­sor lan­guage that you’ve started to use, but maybe haven’t got­ten a full grasp on how ei­ther work yet. So you stum­ble upon this afore­men­tioned ar­ti­cle, and de­cide to put that an­droid-bab­ble into a vari­able in your stylesheet. Maybe, be­cause you’re a bit more ad­vanced, you want to put it in a mixin. Let’s say that this is for a com­monly used icon, and you pro­ceed to ref­er­ence that vari­able or mixin all over the place, and your code looks much cleaner than if you were to try and put a big block of garbage all over the place. And you smile at how clean your code looks, com­pile your stylesheet, and give your­self a pat on the back for how good of a job you’ve done.</p>\n<p>Except, that block of garbage can’t get<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>referenced” in your com­piled <span class=\"small-caps\">CSS</span> now, it needs to be put in every place you want that <span class=\"small-caps\">SVG</span> to show up. Every… sin­gle… place. If you do ex­actly what I just men­tioned, there’s no shame in it. It’s a to­tally un­der­stand­able mis­take, but yeah you might want to ﬁx that. If you make this mis­take, your un­wit­tingly get­ting rid of one of the best ben­e­ﬁts of <span class=\"small-caps\">SVG</span>: per­for­mance. Instead, you’re clog­ging up your style re­quest with all of this BASE-64 non­sense.</p>\n<h2 id=\"how-svgs-should-be-implemented\">How SVGs <em>should</em> be im­ple­mented</h2>\n<p>Now, this is one par­tic­u­lar bad way to im­ple­ment this, but how can we ﬁx it, and what are some other so­lu­tions? SVGs are very ﬂex­i­ble in the way of how they can be im­ple­mented, and like I’ve said, there is lit­tle con­sis­tency on which way is best. In my mind, there are two ways that an <span class=\"small-caps\">SVG</span> can and should be im­ple­mented, and they both have their ben­e­ﬁt. The ﬁrst is to use them in­line. SVGs can be in­jected di­rectly into your markup. This al­lows you the added ben­e­ﬁt of be­ing able to dy­nam­icly ma­nip­u­late them. Once an <span class=\"small-caps\">SVG</span> is in­line, you can think of it as be­ing drawn when the page is be­ing painted by the browser, but it can be up­dated via <span class=\"small-caps\">CSS</span> as well. A sim­ple ex­am­ple of this hav­ing an icon, that once hov­ered over, will change the ﬁll color from blue to red.</p>\n<pre><code class=\"lang-HTML\">&lt;!-- in your HTML --&gt;\n    &lt;svg&gt;\n        &lt;path&gt;&lt;/path&gt; &lt;!-- part of your svg icon --&gt;\n        .\n        .\n        .\n    &lt;/svg&gt;\n</code></pre>\n<pre><code class=\"lang-SCSS\">     //In your Stylesheet (sass in this example)\n    svg {\n        path {\n            fill: blue;\n        }\n\n        &amp;:hover {\n            path {\n                fill: red;\n            }\n        }\n    }\n</code></pre>\n",
		"meta": {
			"creationDate": "2021-07-21T22:53:03.273Z",
			"lastEdited": "2021-07-26T14:50:31.035Z",
			"tags": [
				"SVG"
			],
			"title": "A Problem with SVGs and How to Avoid It",
			"publishDate": "2017-03-18T00:00:00-05:00"
		}
	},
	"zen-and-the-art-of-side-projects": {
		"content": "<p>How many of you have been here be­fore? You just had a cool idea. You want to build this cool idea. You ﬁg­ured it could be some­thing fun to work on late at night, on sat­ur­day morn­ings. You want to take a breath at the end and go<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>Ah, look at what I’ve done. Here’s my doo-hickie”. Or maybe you just learned a new tech­nol­ogy, and you’re dy­ing to try it out. You’re try­ing to ﬁnd an idea that could be good to have this new tech­nol­ogy made with. You also want to stand at the end with some ac­com­plish­ment, and say<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>well, here’s some­thing I did, and I learned a lot while do­ing this”. I think these are the two main rea­sons for side pro­jects: Wanting to build an idea, or want­ing to learn through build­ing.</p>\n<p>Building stuff is fun right? You’re a de­vel­oper, a pro­gram­mer, a web en­gi­neer. Your job is to make things. You’re a builder. And while build­ing and solv­ing tiny prob­lems is fun for you, hav­ing some­thing that you can show off is al­ways ap­peal­ing. Well, with the two sce­nar­ios above in mind, how many of your side pro­jects have ended in in­com­plete garbage, things that’s you’ve left by the way­side for months, un­ﬁn­ished, never to be touched again. You spent 20 hours set­ting up a build and every­thing, but now you’re just… done with it. For one rea­son or an­other. Sucks does­n’t it? Kind of feels like you did a ton of work, and yet at the end feel bad about it. Well, I’ve been there too. A lot. I’m pretty sure that I have a few Digital Ocean droplets out there right now that are just idly run­ning, with half ﬁn­ished code on them. I have a bunch of do­main names I’ve bought with the in­ten­tion of this<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>really be­ing the time I’m go­ing to ﬁn­ish some­thing”. And then it does­n’t hap­pen. And then I feel like crap.</p>\n<p>Anyway, here’s a list of ad­vice that I’ve learned, and I’ve started com­plet­ing way more pro­jects since keep­ing these things in mind</p>\n<h2 id=\"1-k-i-s-s-keep-it-scoped-stupid-\">1) K.I.S.S (Keep it Scoped, Stupid)</h2>\n<p>You have big dreams, big as­pi­ra­tions. I get it. You want to change the world. You prob­a­bly won’t to­day. Sorry to be the bearer of bad news. In fact, you prob­a­bly won’t to­mor­row ei­ther. This should­n’t get you down, it should be a bit of a re­lief. Because you don’t <span class=\"small-caps\">HAVE</span> to change the world to­day. Think about what you could get done in a day of straight work. If you’re like me, you have these bursts from time to time, where you work 20 hours de­vel­op­ing and get some­thing… well small. Workable, cool, but smaller than what you orig­i­nally hoped.</p>\n<p>You need to be con­ser­v­a­tive with your es­ti­ma­tion some­times, es­pe­cially with side pro­jects. They should at a bare min­i­mum be more en­joy­able than work. Ideally they should even be fun. But if your idea is go­ing to take 100 hours, and you re­al­ize how drained you feel af­ter a long day of work, and if you have plans this Saturday, you’ll start to get an­noyed at your­self for not tack­ling your idea (which if you were to be paid to com­plete would cost thou­sands of dol­lars).</p>\n<p>Instead, think about a small scope. What can you get done in a short amount of time. Write out the things that you could build to­day, if you went on an in­cred­i­ble tear. And then put a full stop at the end. It might not be the biggest or shini­est idea in the world, but it’ll be a start. An ex­am­ple of this could be like this. You want to build a new so­cial net­work. A Twitter clone or some­thing. There’s 500 things you need to do be­fore you’d call it<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>done”. Even if you did those 500 things, you might never even say it is done. But, to­day you could build a log in sys­tem, maybe even with a sim­ple server. Maybe just the back­end. Sweet, write down what it’ll take, do it, do it well, throw it in a repo, add tests to it, and some quick docs. You have com­pleted a pro­ject. You can use that later. Sure, you might still have your big idea in mind, but for now, you have some­thing to fall back on in case you change your mind and want to do an­other huge idea later.</p>\n<p>Wanting to do some­thing else ac­tu­ally goes into the next piece of ad­vice pretty well</p>\n<h2 id=\"2-the-biggest-blocker-you-re-going-to-face-is-your-own-boredom\">2) The biggest blocker you’re go­ing to face is your own bore­dom</h2>\n<p>You have other stuff to do. I get it. The dif­fer­ence be­tween work time and free time is that you get to choose what you <span class=\"small-caps\">WANT</span> to do in your free time. If that hap­pens to be your next big pro­ject, so be it. But as time goes on, you only get more likely to get bored of a pro­ject. Let me re­peat that, you’re go­ing to get bored. You could be the most am­bi­tious per­son on the planet, with an idea you’re in­cred­i­bly pas­sion­ate about. You’re still go­ing to get bored. And if you’re not mak­ing money from that thing that’s bor­ing you, you’re prob­a­bly just go­ing to stop do­ing it. What’s the best way to pre­vent this?</p>\n<p>Doing things quickly. If you’re in an in­spired mood to get things done, the best thing you can do is try to get as much done as pos­si­ble. Try and get all that you can done while you still have the de­sire to do so. I’m sure some of you out there are in­cred­i­bly dis­ci­plined work­ers. I’d like to con­sider my­self one as well. But when you’re cut­ting your own free time to do some­thing, you might want to be con­ser­v­a­tive with your stick-to-itive­ness. And I can say that I’ve got­ten much more pro­jects done by ded­i­cat­ing a small amount of time, and go­ing full force on it.</p>\n<h2 id=\"3-if-you-re-doing-something-for-the-first-time-it-probably-won-t-be-good\">3) If you’re do­ing some­thing for the ﬁrst time, it prob­a­bly won’t be good</h2>\n<p>The sec­ond sce­nario I laid out at the be­gin­ning of this ar­ti­cle men­tioned side pro­jects that are started for the pur­pose of learn­ing a new tech­nol­ogy. It seems like an ef­fec­tive use of time, learn­ing some new lan­guage, or tool, and hav­ing some­thing use­ful come out of it. Unfortunately, what of­ten ends up hap­pen­ing is you have some bet­ter un­der­stand­ing of what­ever it was you were try­ing to learn, enough to know that what you cre­ated sucks. It’s com­mon to feel bad about this, like your pro­ject was a fail­ure. Instead, think of it in the per­spec­tive of knowl­edge build­ing, rather than pro­ject build­ing. The main pur­pose of this pro­ject is to learn, not to have a us­able mod­ule come out of it. This is ob­vi­ously a mov­able scale, as it’s com­mon to use new ter­tiary tools. But just keep in mind that part of learn­ing some­thing new is fail­ing at it again and again. If you want to re­ally cre­ate some­thing that you would con­sider sta­ble, and us­able, try build­ing it out of tools you al­ready know. You’re much more likely to be sat­is­ﬁed by the end re­sult, even if you feel like you haven’t learned too much</p>\n<h2 id=\"4-if-you-re-a-beginner-you-re-going-to-make-a-lot-of-crap\">4) If you’re a be­gin­ner, you’re go­ing to make a lot of crap</h2>\n<p>This is kind of an ex­ten­sion of num­ber 3. When you’re ﬁrst start­ing out in the world of de­vel­op­ment, you’re go­ing to pretty much <span class=\"small-caps\">ONLY</span> have learn­ing pro­jects. You don’t know enough to even be­gin to es­ti­mate all of the above. That’s ok. Part of be­ing a be­gin­ner is mak­ing lots of crap, be­ing proud of the crap for a few days, be­fore re­al­iz­ing how poor it ac­tu­ally is. Programming has a high learn­ing curve, and this feel­ing is that of hik­ing up it. With lots of time and prac­tice, it does get bet­ter, but only if you stick to it. And you’re much more likely to stick to it if you’re pos­i­tive about the progress you’re mak­ing. Keep in mind how much you’ve been learn­ing, dif­fer­ent tools and li­braries, stacks and build processes. It can only help in fu­ture en­deav­ors.</p>\n<h2 id=\"5-don-t-tell-people-you-re-going-to-work-on-something\">5) Don’t tell peo­ple you’re go­ing to work on some­thing</h2>\n<p>If you are in a more so­cial de­vel­op­ment com­mu­nity, on­line or oth­er­wise, it might be tempt­ing to tell peo­ple about the cool new idea you have. Or that you’re in the mid­dle of a cool pro­ject. You want to share your ex­pe­ri­ences. Don’t. This is­n’t for any<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>they should­n’t know your idea be­cause it’s go­ing to change the world” rea­son. It’s more to avoid opin­ions be­ing made about you. You’re likely to start way more pro­jects than ﬁn­ish, and this is nor­mal. But if you talk to peo­ple about every sin­gle one, they’re not go­ing to care when you’re talk­ing to them for the 9th time about the<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>cool thing you’re work­ing on”, and they’re also go­ing to see your pro­jects as some­thing akin to<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>get rich quick schemes” or<span class=\"push-double\"></span> <span class=\"pull-double\">“</span>pie in the sky” dreams. Things you talk about but never ac­tu­ally get done. Even if you get half of all the pro­jects you talk about done, would that be some­thing you’d want to talk about reg­u­larly? This is ob­vi­ously a much more neb­u­lous rule than the oth­ers, and can vary de­pend­ing on who you talk to, but it’s gen­er­ally a good idea to just not brag, and if you are go­ing to brag, at least brag over some­thing that you’d con­sider com­plete.</p>\n<h2 id=\"to-finish\">To ﬁn­ish</h2>\n<p>This ended up be­ing a bit more ranty than I would have ex­pected, but I think the im­por­tant thing that I’ve learned over the years is that the abil­ity to ﬁn­ish a pro­ject is a skill, just like any­thing else in this in­dus­try and in life. And just like every­thing else, it takes time and prac­tice to get it down well, and even then you’ll have slip ups. You’re go­ing to make crap. Good! Go make crap. You <span class=\"small-caps\">CAN</span> get a cool mod­ule done in a day. It might suck, who cares? No one is giv­ing you dead­lines for your side pro­jects. If they are, by de­f­i­n­i­tion it should­n’t be a side pro­ject. Just go build some­thing to­day</p>\n",
		"meta": {
			"creationDate": "2021-08-02T15:26:53.286Z",
			"lastEdited": "2021-08-02T15:27:01.356Z",
			"tags": [
				"professional development",
				"side project"
			],
			"title": "Zen and the Art Of Side Projects",
			"publishDate": "2017-12-04T00:00:00-05:00"
		}
	}
}